#!/usr/bin/env python
#
# Ubuntu aarch64 image
#
# Copyright 2019 Linaro
#
# Authors:
#  Robert Foley <robert.foley@linaro.org>
#  Originally based on ubuntu.i386 Fam Zheng <famz@redhat.com>
#
# This code is licensed under the GPL version 2 or later.  See
# the COPYING file in the top-level directory.
#

import os
import sys
import subprocess
import basevm
import time

DEFAULT_CONFIG = {
    'cpu'          : "max",
    'machine'      : 'virt',
    'install_cmds' : 'yum update -y , yum install -y docker make git python3 , systemctl enable docker',
    'boot_params'  : "-device VGA "\
                     "-device virtio-scsi-device,id=scsi "\
                     "-drive file={},format=raw,if=none,id=hd0 "\
                     "-device scsi-hd,drive=hd0",
}

class CentosAarch64VM(basevm.BaseVM):
    name = "centos.aarch64"
    arch = "aarch64"
    BUILD_SCRIPT = """
        set -e;
        cd $(mktemp -d);
        sudo chmod a+r /dev/vdb;
        tar -xf /dev/vdb;
        ./configure {configure_opts};
        make --output-sync {target} -j{jobs} {verbose};
    """
    def boot(self, img, extra_args=None):

        default_args = ["-pflash", "flash0.img", "-pflash", "flash1.img"]

        if extra_args:
            extra_args.extend(default_args)
        else:
            extra_args = default_args

        # We always add these performance tweaks
        # because without them, we boot so slowly that we
        # can time out finding the boot efi device.
        if os.geteuid() != 0:
            extra_args.extend(["-accel", "tcg,thread=multi"])
        if '-smp' not in extra_args and \
           '-smp' not in self._config['extra_args'] and \
           '-smp' not in self._args:
            # Only add if not already there to give caller option to change it.
            extra_args.extend(["-smp", "8"])
        # We have overridden boot() since aarch64 has additional parameters.
        # Call down to the base class method.
        super(CentosAarch64VM, self).boot(img, extra_args=extra_args)

    def add_user(self):

        useradd = 'useradd -m {} ; chage -M -1 {} ; echo {} | passwd --stdin qemu'
        self.ssh_root_check(useradd.format(self.GUEST_USER,
                                           self.GUEST_USER, self.GUEST_PASS))
        addkey = 'mkdir -p /home/{}/.ssh ; echo "{}" >> /home/{}/.ssh/authorized_keys'
        self.ssh_root_check(addkey.format(self.GUEST_USER, self.ssh_pub_key, self.GUEST_USER))
        self.ssh_root_check("restorecon -R -v /home/{}/.ssh\n".format(self.GUEST_USER))

        self.ssh_root_check("sudo usermod -aG wheel {}\n".format(self.GUEST_USER))
        add_sudo = 'echo "{}  ALL=(ALL) NOPASSWD:ALL"'\
                   ' | sudo tee /etc/sudoers.d/{}'.format(self.GUEST_USER, self.GUEST_USER)
        self.ssh_root_check(add_sudo)

    def build_image(self, img):
        img_tmp = img + ".tmp"
        add_user = "--firstboot-command  'useradd -m {} ; chage -M -1 {} '"
        add_user_cmd = add_user.format(self.GUEST_PASS, self.GUEST_USER,
                                       self.GUEST_USER)
        args = ["virt-builder", "centos-7.2", "--arch aarch64",
        "--output", img_tmp, "--size", "50G",
        '--ssh-inject {}:file:{}'.format("root", self.ssh_pub_key_file),
        "--root-password", "password:" + self.ROOT_PASS,
         ]
        subprocess.check_call(" ".join(args), shell=True)
        subprocess.check_call(["dd", "if=/dev/zero", "of=flash0.img", "bs=1M", "count=64"])

        # A reliable way to get the QEMU EFI image is via a package.
        efi_img = "/usr/share/qemu-efi-aarch64/QEMU_EFI.fd"
        if not os.path.exists(efi_img):
            sys.stderr.write("*** {} is missing\n".format(efi_img))
            sys.stderr.write("*** please install qemu-efi-aarch64 package\n")
            exit(3)
        subprocess.check_call(["dd", "if={}".format(efi_img), "of=flash0.img", "conv=notrunc"])
        subprocess.check_call(["dd", "if=/dev/zero", "of=flash1.img", "bs=1M", "count=64"])

        self.boot(img_tmp)
        self.console_init()
        self.console_wait_send("localhost login:", "root\n")
        self.console_wait_send("Password:", "{}\n".format(self.ROOT_PASS))
        prompt = '[root@localhost ~]#'
        self.console_wait_send(prompt, "restorecon -R -v ~/.ssh\n")
        self.console_wait_send(prompt, "setenforce 0\n")

        # Rest of the commands we issue through ssh.
        self.wait_ssh(wait_root=True)

        self.add_user()

        # If the user chooses *not* to do the second phase,
        # then we will jump right to the graceful shutdown
        if self._config['install_cmds'] != "":
            install_cmds = self._config['install_cmds'].split(',')
            for cmd in install_cmds:
                self.ssh_root(cmd)

        # Make sure qemu user setup properly.
        self.wait_ssh()
        self.ssh_root("poweroff")
        self.console_wait("reboot: Power down")
        self.wait()
        os.rename(img_tmp, img)
        return 0

if __name__ == "__main__":
    sys.exit(basevm.main(CentosAarch64VM, DEFAULT_CONFIG))

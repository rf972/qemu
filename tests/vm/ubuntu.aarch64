#!/usr/bin/env python
#
# Ubuntu aarch64 image
#
# Copyright 2020 Linaro
#
# Authors:
#  Robert Foley <robert.foley@linaro.org>
#  Originally based on ubuntu.i386 Fam Zheng <famz@redhat.com>
#
# This code is licensed under the GPL version 2 or later.  See
# the COPYING file in the top-level directory.
#

import os
import sys
import subprocess
import basevm
import time

DEFAULT_CONFIG = {
    'cpu'          : "max",
    'machine'      : "virt,gic-version=max",
    'install_cmds' : "apt-get update,"\
                     "apt-get build-dep -y qemu,"\
                     "apt-get install -y libfdt-dev flex bison",
    'ssh_timeout'  : 60,
}

class UbuntuAarch64VM(basevm.BaseVM):
    name = "ubuntu.aarch64"
    arch = "aarch64"
    image_name = "ubuntu-18.04-server-cloudimg-arm64.img"
    image_link = "https://cloud-images.ubuntu.com/releases/18.04/release/" + image_name
    login_prompt = "ubuntu-guest login:"
    BUILD_SCRIPT = """
        set -e;
        cd $(mktemp -d);
        sudo chmod a+r /dev/vdb;
        tar --checkpoint=.10 -xf /dev/vdb;
        ./configure {configure_opts};
        make --output-sync {target} -j{jobs} {verbose};
    """
    def _gen_cloud_init_iso(self):
        cidir = self._tmpdir
        mdata = open(os.path.join(cidir, "meta-data"), "w")
        mdata.writelines(["instance-id: ubuntu-vm-0\n",
                          "local-hostname: ubuntu-guest\n"])
        mdata.close()
        udata = open(os.path.join(cidir, "user-data"), "w")
        print("guest user:pw {}:{}".format(self.GUEST_USER, self.GUEST_PASS))
        udata.writelines(["#cloud-config\n",
                          "chpasswd:\n",
                          "  list: |\n",
                          "    root:%s\n" % self.ROOT_PASS,
                          "    %s:%s\n" % (self.GUEST_USER, self.GUEST_PASS),
                          "  expire: False\n",
                          "users:\n",
                          "  - name: %s\n" % self.GUEST_USER,
                          "    sudo: ALL=(ALL) NOPASSWD:ALL\n",
                          "    ssh-authorized-keys:\n",
                          "    - %s\n" % self.ssh_pub_key,
                          "  - name: root\n",
                          "    ssh-authorized-keys:\n",
                          "    - %s\n" % self.ssh_pub_key,
                          "locale: en_US.UTF-8\n"])
        proxy = os.environ.get("http_proxy")
        if not proxy is None:
            udata.writelines(["apt:\n",
                              "  proxy: %s" % proxy])
        udata.close()
        subprocess.check_call(["genisoimage", "-output", "cloud-init.iso",
                               "-volid", "cidata", "-joliet", "-rock",
                               "user-data", "meta-data"],
                               cwd=cidir,
                               stdin=self._devnull, stdout=self._stdout,
                               stderr=self._stdout)

        return os.path.join(cidir, "cloud-init.iso")

    def create_flash_images(self):
        subprocess.check_call(["dd", "if=/dev/zero", "of=flash0.img", "bs=1M", "count=64"])
        # A reliable way to get the QEMU EFI image is via an installed package.
        efi_img = "/usr/share/qemu-efi-aarch64/QEMU_EFI.fd"
        if not os.path.exists(efi_img):
            sys.stderr.write("*** {} is missing\n".format(efi_img))
            sys.stderr.write("*** please install qemu-efi-aarch64 package\n")
            exit(3)
        subprocess.check_call(["dd", "if={}".format(efi_img), "of=flash0.img", "conv=notrunc"])
        subprocess.check_call(["dd", "if=/dev/zero", "of=flash1.img", "bs=1M", "count=64"])

    def boot(self, img, extra_args=None):
        self.create_flash_images()
        pflash_args = "-drive file=flash0.img,format=raw,if=pflash "\
                      "-drive file=flash1.img,format=raw,if=pflash"
        default_args = pflash_args.split(" ")
        if extra_args:
            extra_args.extend(default_args)
        else:
            extra_args = default_args

        # We always add these performance tweaks
        # because without them, we boot so slowly that we
        # can time out finding the boot efi device.
        if os.geteuid() != 0:
            extra_args.extend(["-accel", "tcg,thread=multi"])
        if '-smp' not in extra_args and \
           '-smp' not in self._config['extra_args'] and \
           '-smp' not in self._args:
            # Only add if not already there to give caller option to change it.
            extra_args.extend(["-smp", "8"])

        # We have overridden boot() since aarch64 has additional parameters.
        # Call down to the base class method.
        super(UbuntuAarch64VM, self).boot(img, extra_args=extra_args)

    def wait_boot(self):
        # When we are in this extra debug mode,
        # also show the console during boot.
        self.console_wait(self.login_prompt)

    def build_image(self, img):
        os_img = self._download_with_cache(self.image_link)
        img_tmp = img + ".tmp"
        subprocess.check_call(["cp", "-f", os_img, img_tmp])
        subprocess.check_call(["qemu-img", "resize", img_tmp, "+50G"])
        ci_img = self._gen_cloud_init_iso()

        self.boot(img_tmp, extra_args = ["-cdrom", ci_img])
        self.wait_ssh()
        # Fix for slow ssh login.
        self.ssh_root("chmod -x /etc/update-motd.d/*")
        self.ssh_root("touch /etc/cloud/cloud-init.disabled")
        # Disable auto upgrades.
        # We want to keep the VM system state stable.
        self.ssh_root('sed -ie \'s/"1"/"0"/g\' /etc/apt/apt.conf.d/20auto-upgrades')

        # If the user chooses *not* to do the second phase,
        # then we will jump right to the graceful shutdown
        if self._config['install_cmds'] != "":
            # Don't check the status in case the guest hang up too quickly
            self.ssh_root("sync && reboot")

            self.wait_ssh()
            # The previous update sometimes doesn't survive a reboot, so do it again
            self.ssh_root("sed -ie s/^#\ deb-src/deb-src/g /etc/apt/sources.list")

            # Issue the install commands.
            # This can be overriden by the user in the config .yml.
            install_cmds = self._config['install_cmds'].split(',')
            for cmd in install_cmds:
                self.ssh_root(cmd)
        self.graceful_shutdown()
        self.wait()
        os.rename(img_tmp, img)
        return 0

if __name__ == "__main__":
    sys.exit(basevm.main(UbuntuAarch64VM, DEFAULT_CONFIG))
